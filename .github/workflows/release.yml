name: Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup cache for Gradle
        id: cache-gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Get project name
        id: get_project_name
        run: |
          PROJECT_NAME=$(basename $GITHUB_REPOSITORY)
          echo "PROJECT_NAME=$PROJECT_NAME" | tee -a $GITHUB_ENV

      - name: Get project version
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "VERSION=$VERSION" | tee -a $GITHUB_ENV

      - name: Update versionName and versionCode
        run: |
          VERSION_CODE=$(echo ${VERSION} | sed 's/[^0-9]//g')
          sed -i 's/versionName = ".*"/versionName = "'${VERSION}'"/' app/build.gradle.kts
          sed -i 's/versionCode = [0-9]\+/versionCode = '${VERSION_CODE}'/' app/build.gradle.kts
          echo "Updated versionName to ${VERSION}"
          echo "Updated versionCode to ${VERSION_CODE}"

      - name: Decode keystore
        run: |
          echo "$SIGNING_KEY_BASE64" | base64 --decode > app/release-keystore.jks
        env:
          SIGNING_KEY_BASE64: ${{ secrets.SIGNING_KEY_BASE64 }}

      - name: Build project
        run: ./gradlew --no-daemon build
        env:
          storePassword: ${{ secrets.KEY_STORE_PASSWORD }}
          keyAlias: ${{ secrets.KEY_ALIAS }}
          keyPassword: ${{ secrets.KEY_PASSWORD }}

      - name: Run tests
        run: ./gradlew --no-daemon test

      - name: Assemble release
        run: ./gradlew --no-daemon assembleRelease
        env:
          storePassword: ${{ secrets.KEY_STORE_PASSWORD }}
          keyAlias: ${{ secrets.KEY_ALIAS }}
          keyPassword: ${{ secrets.KEY_PASSWORD }}

      - name: Upload release APK
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PROJECT_NAME }}-release-${{ env.VERSION }}
          path: app/build/outputs/apk/release/app-release.apk

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get project name
        id: get_project_name
        run: |
          PROJECT_NAME=$(basename $GITHUB_REPOSITORY)
          echo "PROJECT_NAME=$PROJECT_NAME" | tee -a $GITHUB_ENV

      - name: Get project version
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "VERSION=$VERSION" | tee -a $GITHUB_ENV

      - name: Get previous tag
        id: get_previous_tag
        run: |
          TAGS=$(git tag --list 'v[0-9]*.[0-9]*.[0-9]*' --sort=-v:refname)
          CURRENT_TAG=$VERSION
          PREVIOUS_TAG=$(echo "$TAGS" | grep -A 1 "^$CURRENT_TAG$" | tail -n 1)
          echo "PREVIOUS_TAG=$PREVIOUS_TAG" | tee -a $GITHUB_ENV

      - name: Print tag information
        run: |
          echo "Previous tag: ${{ env.PREVIOUS_TAG }}"
          echo "Current version: ${{ env.VERSION }}"

      - name: Download release artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.PROJECT_NAME }}-release-${{ env.VERSION }}

      - name: Generate Changelog
        env:
          CHANGELOG_GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          if [ -z "${{ env.PREVIOUS_TAG }}" -o "${{ env.PREVIOUS_TAG }}" = "${{ env.VERSION }}" ]; then
            echo "No previous tag found, generating changelog for the entire history"
            docker run -e CHANGELOG_GITHUB_TOKEN -v $(pwd):/usr/local/src/your-app ferrarimarco/github-changelog-generator -u ${{ github.repository_owner }} -p ${{ env.PROJECT_NAME }}
          else
            echo "Generating changelog since tag ${{ env.PREVIOUS_TAG }}"
            docker run -e CHANGELOG_GITHUB_TOKEN -v $(pwd):/usr/local/src/your-app ferrarimarco/github-changelog-generator -u ${{ github.repository_owner }} -p ${{ env.PROJECT_NAME }} --since-tag ${{ env.PREVIOUS_TAG }}
          fi

      - name: Remove Changelog Generator Notice
        run: |
          sed -i '/This Changelog was automatically generated by \[github_changelog_generator\]/d' CHANGELOG.md

      - name: Display Changelog
        run: |
          echo "Generated Changelog:"
          cat CHANGELOG.md

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: Release ${{ env.VERSION }}
          body_path: ./CHANGELOG.md
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./app-release.apk
          asset_name: ${{ env.PROJECT_NAME }}-release-${{ env.VERSION }}.apk
          asset_content_type: application/octet-stream

